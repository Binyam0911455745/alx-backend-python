# messaging_app/urls.py

from django.contrib import admin
from django.urls import path, include # <-- Add 'include'
from rest_framework.routers import DefaultRouter # <-- Add DefaultRouter

from chats import views # Import views from your chats app

# Create a router instance
router = DefaultRouter() # <-- routers.DefaultRouter()

# Register your ViewSets with the router
# The first argument is the URL prefix, the second is your ViewSet
router.register(r'conversations', views.ConversationViewSet, basename='conversation') # <-- Register ConversationViewSet

# Manually define the URL for messages as it's a nested resource.
# This path links to the MessageViewSet, and the 'conversation_pk' will be picked up by its get_queryset.
# We're telling DRF which actions (HTTP methods) map to which methods on the ViewSet.
urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include(router.urls)), # Include all URLs generated by the router
    path('api/', include('chats.urls')),
    # Manually define the nested messages endpoint
    path('api/conversations/<uuid:conversation_pk>/messages/',
         views.MessageViewSet.as_view({'get': 'list', 'post': 'create'}),
         name='message-list-create'), # <-- Implement endpoints to create/send messages

    # If you also wanted detail views for individual messages (e.g., /api/conversations/UUID/messages/MESSAGE_UUID/)
    # path('api/conversations/<uuid:conversation_pk>/messages/<uuid:pk>/',
    #      views.MessageViewSet.as_view({'get': 'retrieve', 'put': 'update', 'patch': 'partial_update', 'delete': 'destroy'}),
    #      name='message-detail'),
    path('api-auth/', include('rest_framework.urls')),
]